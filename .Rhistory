plot(pred,r1)
plot(pred,r1)
plot(medv_im$residuals)
plot(medv_im$fitted.values,medv_im)
medv_im$fitted.values
medv_im
plot(medv_im$fitted.values,medv_im)
plot(stdres(medv_im)$fitted.values,medv_im)
plot(medv_im$fitted.values,stdres(medv_im))
plot(new_boston$lstat,stdres(medv_im))
medv_im <-lm(data = new_boston,
formula = new_boston$medv ~ (new_boston$lstat))
medv_im <-lm(data = new_boston,
formula = new_boston$medv ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ new_boston$lstat
+new_boston$ptratio
))
medv_im_la <-lm(data = new_boston,
formula = new_boston$medv ~ ( new_boston$lstat))
qqnorm(stdres(medv_im_la))
qqline(r1,col='red')
medv_im_1 <-lm(data = new_boston,
formula = new_boston$medv ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ I(new_boston$lstat^2)
+new_boston$ptratio
))
medv_im_1 <-lm(data = new_boston,
formula = I(new_boston$medv^2) ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ new_boston$lstat
+new_boston$ptratio
))
r2 = stdres(medv_im_1)
hist(r2, breaks='Scott', freq=F)
qqnorm(r2)
qqline(r2,col='red')
qqnorm(r2)
qqline(r2,col='red')
medv_im_1 <-lm(data = new_boston,
formula = I(ln(new_boston$medv)) ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ new_boston$lstat
+new_boston$ptratio
))
medv_im_1 <-lm(data = new_boston,
formula = I(log(new_boston$medv)) ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ new_boston$lstat
+new_boston$ptratio
))
r2 = stdres(medv_im_1)
hist(r2, breaks='Scott', freq=F)
qqnorm(r2)
qqline(r2,col='red')
medv_im$residuals
plot(stdres(medv_im)$residuals)
# Q3E
plot(stdres(medv_im)(medv_im$residuals))
#Q3H
stdres(medv_im)
for (x in stdres(medv_im)){if x>2.3 || x<-2.3 {print(x)}}
for (x in stdres(medv_im)){if x > 2.3 || x<-2.3 {print(x)}}
for (x in len(stdres(medv_im))){
if stdres(medv_im)[x] > 2.3 || stdres(medv_im)[x]< (-2.3) {print(x)}}
for (x in len(r1)){
if r1[x] > 2.3 || r1[x]< (-2.3) {print(x)}}
for (g in len(r1)){
if r1[g] > 2.3 || r1[g]< (-2.3) {print(g)}}
for (g in len(r1)){
if (r1[g] > 2.3 r1[g]< (-2.3)) {print(g)}}
for (g in len(r1)){
if (r1[g] > 2.3 || r1[g]< (-2.3)) {print(g)}}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {vec <- g}}
vec = 0
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {apply(vec,g)}}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}}
install.packages("dplyr")
#Q 2A
cars = mtcars
# Q3A
boston = Boston
new_boston <- select(boston,crim,zn,indus,nox,rm,age,dis,tax,ptratio,black,lstat
,medv)
# Q3B
medv_im <-lm(data = new_boston,
formula = new_boston$medv ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ new_boston$lstat
+new_boston$ptratio
))
summary (medv_im)
# Q3C
# Q3D
r1 = stdres(medv_im)
hist(r1, breaks='Scott', freq=F)
qqnorm(r1)
qqline(r1,col='red')
# Q3E
plot((medv_im$residuals))
plot(medv_im$fitted.values,stdres(medv_im))
plot(new_boston$lstat,stdres(medv_im))
# Q3F
medv_im_la <-lm(data = new_boston,
formula = new_boston$medv ~ ( new_boston$lstat))
qqnorm(stdres(medv_im_la))
qqline(r1,col='red')
#Q3G
medv_im_1 <-lm(data = new_boston,
formula = I(log(new_boston$medv)) ~ (new_boston$crim + new_boston$zn
+ new_boston$indus
+ new_boston$nox+new_boston$rm
+ new_boston$age+new_boston$dis
+ new_boston$tax
+ new_boston$black
+ new_boston$lstat
+new_boston$ptratio
))
r2 = stdres(medv_im_1)
hist(r2, breaks='Scott', freq=F)
qqnorm(r2)
qqline(r2,col='red')
#Q3H
stdres(medv_im)
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}}
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}}
qqline(r2,col='red')
stdres(medv_im)
hh
1+1
for (g in (r1)){
if (g > 2.3 || g < (-2.3)) {print(g)}}
4
library('tidyverse')
library(data.table)
X <- read.csv(" https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=merge&merge-url01=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D1326629740%26single%3Dtrue%26output%3Dcsv&merge-keys01=%23country%2Bname&merge-tags01=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&filter02=merge&merge-url02=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D398158223%26single%3Dtrue%26output%3Dcsv&merge-keys02=%23adm1%2Bname&merge-tags02=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&merge-replace02=on&merge-overwrite02=on&filter03=explode&explode-header-att03=date&explode-value-att03=value&filter04=rename&rename-oldtag04=%23affected%2Bdate&rename-newtag04=%23date&rename-header04=Date&filter05=rename&rename-oldtag05=%23affected%2Bvalue&rename-newtag05=%23affected%2Binfected%2Bvalue%2Bnum&rename-header05=Value&filter06=clean&clean-date-tags06=%23date&filter07=sort&sort-tags07=%23date&sort-reverse07=on&filter08=sort&sort-tags08=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv")
X <- read.csv(" https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=merge&merge-url01=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D1326629740%26single%3Dtrue%26output%3Dcsv&merge-keys01=%23country%2Bname&merge-tags01=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&filter02=merge&merge-url02=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D398158223%26single%3Dtrue%26output%3Dcsv&merge-keys02=%23adm1%2Bname&merge-tags02=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&merge-replace02=on&merge-overwrite02=on&filter03=explode&explode-header-att03=date&explode-value-att03=value&filter04=rename&rename-oldtag04=%23affected%2Bdate&rename-newtag04=%23date&rename-header04=Date&filter05=rename&rename-oldtag05=%23affected%2Bvalue&rename-newtag05=%23affected%2Binfected%2Bvalue%2Bnum&rename-header05=Value&filter06=clean&clean-date-tags06=%23date&filter07=sort&sort-tags07=%23date&sort-reverse07=on&filter08=sort&sort-tags08=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv")
X <- read.csv("https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=merge&merge-url01=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D1326629740%26single%3Dtrue%26output%3Dcsv&merge-keys01=%23country%2Bname&merge-tags01=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&filter02=merge&merge-url02=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D398158223%26single%3Dtrue%26output%3Dcsv&merge-keys02=%23adm1%2Bname&merge-tags02=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&merge-replace02=on&merge-overwrite02=on&filter03=explode&explode-header-att03=date&explode-value-att03=value&filter04=rename&rename-oldtag04=%23affected%2Bdate&rename-newtag04=%23date&rename-header04=Date&filter05=rename&rename-oldtag05=%23affected%2Bvalue&rename-newtag05=%23affected%2Binfected%2Bvalue%2Bnum&rename-header05=Value&filter06=clean&clean-date-tags06=%23date&filter07=sort&sort-tags07=%23date&sort-reverse07=on&filter08=sort&sort-tags08=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv")
Cases <- read.csv("https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=merge&merge-url01=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D1326629740%26single%3Dtrue%26output%3Dcsv&merge-keys01=%23country%2Bname&merge-tags01=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&filter02=merge&merge-url02=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D398158223%26single%3Dtrue%26output%3Dcsv&merge-keys02=%23adm1%2Bname&merge-tags02=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&merge-replace02=on&merge-overwrite02=on&filter03=explode&explode-header-att03=date&explode-value-att03=value&filter04=rename&rename-oldtag04=%23affected%2Bdate&rename-newtag04=%23date&rename-header04=Date&filter05=rename&rename-oldtag05=%23affected%2Bvalue&rename-newtag05=%23affected%2Binfected%2Bvalue%2Bnum&rename-header05=Value&filter06=clean&clean-date-tags06=%23date&filter07=sort&sort-tags07=%23date&sort-reverse07=on&filter08=sort&sort-tags08=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv")
Deaths <- read.csv("https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=merge&merge-url01=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D1326629740%26single%3Dtrue%26output%3Dcsv&merge-keys01=%23country%2Bname&merge-tags01=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&filter02=merge&merge-url02=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D398158223%26single%3Dtrue%26output%3Dcsv&merge-keys02=%23adm1%2Bname&merge-tags02=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&merge-replace02=on&merge-overwrite02=on&filter03=explode&explode-header-att03=date&explode-value-att03=value&filter04=rename&rename-oldtag04=%23affected%2Bdate&rename-newtag04=%23date&rename-header04=Date&filter05=rename&rename-oldtag05=%23affected%2Bvalue&rename-newtag05=%23affected%2Binfected%2Bvalue%2Bnum&rename-header05=Value&filter06=clean&clean-date-tags06=%23date&filter07=sort&sort-tags07=%23date&sort-reverse07=on&filter08=sort&sort-tags08=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv")
Recovered <- read.csv("https://data.humdata.org/hxlproxy/data/download/time_series_covid19_recovered_global_narrow.csv?dest=data_edit&filter01=merge&merge-url01=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D1326629740%26single%3Dtrue%26output%3Dcsv&merge-keys01=%23country%2Bname&merge-tags01=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&filter02=merge&merge-url02=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vTglKQRXpkKSErDiWG6ycqEth32MY0reMuVGhaslImLjfuLU0EUgyyu2e-3vKDArjqGX7dXEBV8FJ4f%2Fpub%3Fgid%3D398158223%26single%3Dtrue%26output%3Dcsv&merge-keys02=%23adm1%2Bname&merge-tags02=%23country%2Bcode%2C%23region%2Bmain%2Bcode%2C%23region%2Bsub%2Bcode%2C%23region%2Bintermediate%2Bcode&merge-replace02=on&merge-overwrite02=on&filter03=explode&explode-header-att03=date&explode-value-att03=value&filter04=rename&rename-oldtag04=%23affected%2Bdate&rename-newtag04=%23date&rename-header04=Date&filter05=rename&rename-oldtag05=%23affected%2Bvalue&rename-newtag05=%23affected%2Binfected%2Bvalue%2Bnum&rename-header05=Value&filter06=clean&clean-date-tags06=%23date&filter07=sort&sort-tags07=%23date&sort-reverse07=on&filter08=sort&sort-tags08=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_recovered_global.csv")
View(Deaths)
View(Deaths)
cases.agg <- filter(Cases,Date = "2021-05-01")
cases.agg <- filter(Cases,Date == "2021-05-01"
cases.agg <- select (filter(Cases,Date == "2021-05-01"),Country.Region,Value)
select(cases.agg,Country.Region,Value)
cases.agg <-(filter(Cases,Date == "2021-05-01"))
select(cases.agg,Country.Region,Value)
View(cases.agg)
select(cases.agg,Country.Region,Value)
cases.agg <- select(cases.agg,Country.Region,Value)
View(cases.agg)
cases.agg <-(filter(Cases,Date == "2021-05-01"))
cases.agg <- select(cases.agg,Country.Region,Date,Value)
deaths.agg <-(filter(Deaths,Date == "2021-05-01"))
deaths.agg <- select(deaths.agg,Country.Region,Value)
deaths.agg <-(filter(Deaths,Date == "2021-05-01"))
deaths.agg <- select(deaths.agg,Country.Region,Date,Value)
recovered.agg <-(filter(Recovered,Date == "2021-05-01"))
recovered.agg <- select(recovered.agg,Country.Region,Date,Value)
View(deaths.agg)
cases.agg_ma <-(filter(Cases,Date == "2021-03-31"))
cases.agg_ma <- select(cases.agg,Country.Region,Date,Value)
deaths.agg_ma <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_ma <- select(deaths.agg,Country.Region,Date,Value)
recovered.agg_ma <-(filter(Recovered,Date == "2021-03-31"))
recovered.agg_ma <- select(recovered.agg,Country.Region,Date,Value)
cases.agg_ma %>%
arrange(desc(Value)) %>%
head(10)
cases.agg_ma
cases.agg_ma
cases.agg_ma
cases.agg_ma %>%
arrange(desc(Value)) %>%
head(10)
View(cases.agg_ma)
cases.agg_ma_top_ten <- cases.agg_ma %>%
arrange(desc(Value)) %>%
head(10)
View(cases.agg_ma_top_ten)
View(cases.agg_ma)
cases.agg_ma <-(filter(Cases,Date == "2021-03-31"))
cases.agg_ma <- select(cases.agg_ma,Country.Region,Date,Value)
deaths.agg_ma <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_ma <- select(deaths.agg_ma,Country.Region,Date,Value)
recovered.agg_ma <-(filter(Recovered,Date == "2021-03-31"))
recovered.agg_ma <- select(recovered.agg_ma,Country.Region,Date,Value)
View(cases.agg)
View(cases.agg_ma)
cases.agg_ma_top_ten <- cases.agg_ma %>%
arrange(desc(Value)) %>%
head(10)
View(cases.agg_ma_top_ten)
cases.agg_1 <-(filter(Cases,Date == "2021-05-01"))
cases.agg_2 <- group_by(cases.agg_1,Country.Region)
View(cases.agg_2)
View(cases.agg_2)
cases.agg_1 <-(filter(Cases,Date == "2021-05-01"))
cases.agg_2 <- group_by(cases.agg_1,Country.Region)
cases.agg_3 <-summarise(Value = sum(Value))
cases.agg_3 <-summarise(cases.agg_2, Value = sum(Value))
cases.agg_3 <-summarise(cases.agg_2, All_Value = sum(Value))
cases.agg_3 <-summarise(cases.agg_2, All_Value = sum(as.numeric(Value)))
View(cases.agg_3)
cases.agg_4 <- select(cases.agg_3,Country.Region,Date,Value)
cases.agg_3 <-summarise(cases.agg_2, All_Value = sum(as.numeric(Value)),Date = "2021-05-01")
deaths.agg_1 <-(filter(Deaths,Date == "2021-05-01"))
deaths.agg_2 <- group_by(deaths.agg_1,Country.Region)
deaths.agg_3 <-summarise(deaths.agg_2, All_Value = sum(as.numeric(Value)),Date = "2021-05-01")
cases.agg_1 <-(filter(Cases,Date == "2021-05-01"))
cases.agg_2 <- group_by(cases.agg_1,Country.Region)
cases.agg_3 <-summarise(cases.agg_2, All_Value = sum(as.numeric(Value)),Date = "2021-05-01")
deaths.agg_1 <-(filter(Deaths,Date == "2021-05-01"))
deaths.agg_2 <- group_by(deaths.agg_1,Country.Region)
deaths.agg_3 <-summarise(deaths.agg_2, All_Value = sum(as.numeric(Value)),Date = "2021-05-01")
recovered.agg_1 <-(filter(Recovered ,Date == "2021-05-01"))
recovered.agg_2 <- group_by(recovered.agg_1,Country.Region)
recovered.agg_3 <-summarise(recovered.agg_2, All_Value = sum(as.numeric(Value)),Date = "2021-05-01")
View(recovered.agg_ma)
View(recovered.agg_3)
cases.agg_1_m <-(filter(Cases,Date == "2021-03-31"))
cases.agg_2_m <- group_by(cases.agg_1_m,Country.Region)
cases.agg_3_m <-summarise(cases.agg_2_m, All_Value = sum(as.numeric(Value)),Date = "2021-03-31")
deaths.agg_1_m <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_2_m <- group_by(deaths.agg_1_m,Country.Region)
deaths.agg_3_m <-summarise(deaths.agg_2_m, All_Value = sum(as.numeric(Value)),Date = "2021-03-31")
recovered.agg_1_m <-(filter(Recovered ,Date == "2021-03-31"))
recovered.agg_2_m <- group_by(recovered.agg_1_m,Country.Region)
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value = sum(as.numeric(Value)),Date = "2021-03-31")
cases.agg_ma_top_ten <- cases.agg_3_m %>%
arrange(desc(Value)) %>%
head(10)
cases.agg_ma_top_ten <- cases.agg_3_m %>%
arrange(desc(All_Value)) %>%
head(10)
View(cases.agg_ma_top_ten)
big_tuble <- bind_rows(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m)
View(big_tuble)
cases.agg_1_m <-(filter(Cases,Date == "2021-03-31"))
cases.agg_2_m <- group_by(cases.agg_1_m,Country.Region)
cases.agg_3_m <-summarise(cases.agg_2_m, All_Value_C = sum(as.numeric(Value)),Date = "2021-03-31")
deaths.agg_1_m <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_2_m <- group_by(deaths.agg_1_m,Country.Region)
deaths.agg_3_m <-summarise(deaths.agg_2_m, All_Value_D = sum(as.numeric(Value)),Date = "2021-03-31")
recovered.agg_1_m <-(filter(Recovered ,Date == "2021-03-31"))
recovered.agg_2_m <- group_by(recovered.agg_1_m,Country.Region)
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)),Date = "2021-03-31")
big_tuble <- bind_cols(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m)
big_tuble <- bind_rows(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m)
View(big_tuble)
View(recovered.agg_ma)
View(recovered.agg_3_m)
cases.agg_1_m <-(filter(Cases,Date == "2021-03-31"))
cases.agg_2_m <- group_by(cases.agg_1_m,Country.Region)
cases.agg_3_m <-summarise(cases.agg_2_m, All_Value_C = sum(as.numeric(Value)),Date = "2021-03-31")
deaths.agg_1_m <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_2_m <- group_by(deaths.agg_1_m,Country.Region)
deaths.agg_3_m <-summarise(deaths.agg_2_m, All_Value_D = sum(as.numeric(Value)))
recovered.agg_1_m <-(filter(Recovered ,Date == "2021-03-31"))
recovered.agg_2_m <- group_by(recovered.agg_1_m,Country.Region)
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)))
big_tuble <- bind_rows(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m)
View(big_tuble)
big_tuble <- bind_cols(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m)
recovered.agg_3_m
recovered.agg_3_m
View(recovered.agg_3_m)
View(deaths.agg_3_m)
View(cases.agg_3_m)
big_tuble <- bind_cols(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m)
View(big_tuble)
big_tuble <- left_join(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m, by="Country.Region")
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)))
All_Value_R = sum(as.numeric(Value)))
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)))
big_tuble <- left_join(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m, by="Country.Region")
big_tuble <- left_join(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m, by=Country.Region)
big_tuble <- left_join(cases.agg_3_m, deaths.agg_3_m,recovered.agg_3_m, by="Country.Region")
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)))
tuble <- left_join(cases.agg_3_m, deaths.agg_3_m, by="Country.Region")
big_tuble <- left_join(tuble,recovered.agg_3_m, by="Country.Region")
cases.agg_1_m <-(filter(Cases,Date == "2021-03-31"))
cases.agg_2_m <- group_by(cases.agg_1_m,Country.Region)
cases.agg_3_m <-summarise(cases.agg_2_m, All_Value_C = sum(as.numeric(Value)))
deaths.agg_1_m <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_2_m <- group_by(deaths.agg_1_m,Country.Region)
deaths.agg_3_m <-summarise(deaths.agg_2_m, All_Value_D = sum(as.numeric(Value)))
recovered.agg_1_m <-(filter(Recovered ,Date == "2021-03-31"))
recovered.agg_2_m <- group_by(recovered.agg_1_m,Country.Region)
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)),Date = "2021-03-31")
tuble <- left_join(cases.agg_3_m, deaths.agg_3_m, by="Country.Region")
big_tuble <- left_join(tuble,recovered.agg_3_m, by="Country.Region")
big_tuble_top_ten <- big_tuble %>%
arrange(desc(All_Value_C)) %>%
head(10)
View(big_tuble_top_ten)
View(recovered.agg_1_m)
big_tuble_top_ten_end <-transmute(big_tuble_top_ten,Country.Region,All_Value_S = All_Value_C-(All_Value_R+All_Value_D),All_Value_R,All_Value_D)
View(big_tuble_top_ten_end)
barplot(big_tuble_top_ten,
main = "Top 10 Cases Covid 19 31/3/21",
xlab = "Country",
col = c("red","green","blue")
)
barplot(big_tuble_top_ten_end,
main = "Top 10 Cases Covid 19 31/3/21",
xlab = "Country",
col = c("red","green","blue")
)
barplot(big_tuble_top_ten_end,
main = "Stacked barchart",
xlab = "Transmission type", ylab = "Frequency",
col = c("darkgrey", "darkblue", "red"),
legend.text = rownames(big_tuble_top_ten_end),
beside = FALSE)
my_table = table(big_tuble_top_ten_end)
View(tuble)
barplot(my_table,
main = "Stacked barchart",
xlab = "Transmission type", ylab = "Frequency",
col = c("darkgrey", "darkblue", "red"),
legend.text = rownames(big_tuble_top_ten_end),
beside = FALSE)
big_tuble_top_ten_end <-transmute(big_tuble_top_ten,Country.Region,All_Value_S = All_Value_C-(All_Value_R+All_Value_D),All_Value_R,All_Value_D)
my_table = table(big_tuble_top_ten_end)
barplot(my_table,
main = "Stacked barchart",
xlab = "Transmission type", ylab = "Frequency",
col = c("darkgrey", "darkblue", "red"),
legend.text = rownames(my_table),
beside = FALSE)
cases.agg_1_m <-(filter(Cases,Date == "2021-03-31"))
cases.agg_2_m <- group_by(cases.agg_1_m,Country.Region)
cases.agg_3_m <-summarise(cases.agg_2_m, All_Value_C = sum(as.numeric(Value)))
deaths.agg_1_m <-(filter(Deaths,Date == "2021-03-31"))
deaths.agg_2_m <- group_by(deaths.agg_1_m,Country.Region)
deaths.agg_3_m <-summarise(deaths.agg_2_m, All_Value_D = sum(as.numeric(Value)))
recovered.agg_1_m <-(filter(Recovered ,Date == "2021-03-31"))
recovered.agg_2_m <- group_by(recovered.agg_1_m,Country.Region)
recovered.agg_3_m <-summarise(recovered.agg_2_m, All_Value_R = sum(as.numeric(Value)),Date = "2021-03-31")
tuble <- left_join(cases.agg_3_m, deaths.agg_3_m, by="Country.Region")
big_tuble <- left_join(tuble,recovered.agg_3_m, by="Country.Region")
big_tuble_top_ten <- big_tuble %>%
arrange(desc(All_Value_C)) %>%
head(10)
big_tuble_top_ten_end <-transmute(big_tuble_top_ten,Country.Region,All_Value_S = All_Value_C-(All_Value_R+All_Value_D),All_Value_R,All_Value_D)
my_table = table(big_tuble_top_ten_end)
barplot(my_table,
main = "Stacked barchart",
xlab = "Transmission type", ylab = "Frequency",
col = c("darkgrey", "darkblue", "red"),
legend.text = rownames(my_table),
beside = FALSE)
big_tuble_top_ten_end <-transmute(big_tuble_top_ten,Country.Region,All_Value_C,All_Value_S = All_Value_C-(All_Value_R+All_Value_D),All_Value_R,All_Value_D)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,
)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region)
big_tuble_top_ten_end <-transmute(big_tuble_top_ten,Country.Region,All_Value_C,All_Value_S = All_Value_C-(All_Value_R+All_Value_D),All_Value_R,All_Value_D)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,col = c("red", "green", "white", "blue"))
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),beside = FALSE)
plot(log(x))
plot(log(2))
plot(log(2))
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),beside = FALSE)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),legend.text = rownames(big_tuble_top_ten_end),beside = FALSE)
barplot(height = big_tuble_top_ten_end, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),legend.text = rownames(big_tuble_top_ten_end),beside = FALSE)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),legend.text = rownames(big_tuble_top_ten_end),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),legend.text = rownames(big_tuble_top_ten_end),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),legend.text = rownames(big_tuble_top_ten_end$All_Value_C),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col = c("darkgrey", "darkblue", "red"),legend.text = rownames(big_tuble_top_ten_end$All_Value_C),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",fill = c("red","green","blue")
,legend.text = rownames(big_tuble_top_ten_end),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_C, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",fill = c("red","green","blue")
,legend.text = rownames(big_tuble_top_ten_end),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_S+big_tuble_top_ten_end$All_Value_R+big_tuble_top_ten_end$All_Value_D, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",fill = c("red","green","blue")
,legend.text = rownames(big_tuble_top_ten_end),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_S+big_tuble_top_ten_end$All_Value_R+big_tuble_top_ten_end$All_Value_D, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col  = c("red","green","blue")
,legend.text = rownames(big_tuble_top_ten_end),beside = True)
barplot(height = big_tuble_top_ten_end$All_Value_S,big_tuble_top_ten_end$All_Value_R,big_tuble_top_ten_end$All_Value_D, names = big_tuble_top_ten_end$Country.Region,xlab = "Country", ylab = "Total cases",col  = c("red","green","blue")
,legend.text = rownames(big_tuble_top_ten_end),beside = True)
df %>%
gather(variable, value) %>%
ggplot()+
geom_bar(aes(x = variable, fill = value),
color = " black",
position = "stack", show.legend = FALSE)+
geom_text(stat = "count",
aes(x = variable,
label =  value,
y = ..count..,
group = value),
position = "stack", vjust = 1) +
scale_y_continuous(labels =  c("0%", "25%", "50%", "75%", "100%"),
breaks = c(0, 5, 10, 15, 20))
df %>%
gather(variable, value) %>%
ggplot()+
geom_bar(aes(x = variable, fill = value),
color = " black",
position = "stack", show.legend = FALSE)+
geom_text(stat = "count",
aes(x = variable,
label =  value,
y = ..count..,
group = value),
position = "stack", vjust = 1) +
scale_y_continuous(labels =  c("0%", "25%", "50%", "75%", "100%"),
breaks = c(0, 5, 10, 15, 20))
ggplot(big_tuble_top_ten_end, aes(x=soil, y=mean, fill=species)) +
geom_bar(stat="identity")
ggplot(big_tuble_top_ten_end, aes(x=Country.Region, y=All_Value_C, fill=species)) +
geom_bar(stat="identity")
ggplot(big_tuble_top_ten_end, aes(x=Country.Region, y=All_Value_C, fill=All_Value_S)) +
geom_bar(stat="identity")
ggplot(big_tuble_top_ten_end, aes(x=Country.Region, y=All_Value_C, fill=All_Value_S)) +
geom_bar(stat="identity")
ggplot(big_tuble_top_ten_end, aes(x=Country.Region, y=All_Value_C, fill=All_Value_S,All_Value_R,All_Value_D)) +
geom_bar(stat="identity")
sternEnvHealth <- country2Region(inFile=fifa,
nameDataColumn="Potential",joinCode="NAME",nameJoinColumn="Nationality",regionType="SRES",FUN="median")
sternEnvHealth <- country2Region(inFile=fifa,
nameDataColumn="Potential",joinCode="NAME",nameJoinColumn="Nationality",regionType="GBD",FUN="median")
sternEnvHealth <- country2Region(inFile=fifa,
nameDataColumn="Potential",joinCode="NAME",nameJoinColumn="Nationality",regionType="GEO3",FUN="median")
sternEnvHealth <- country2Region(inFile=fifa,
nameDataColumn="Potential",joinCode="NAME",nameJoinColumn="Nationality",FUN="median")
sternEnvHealth <- country2Region(inFile=fifa,
nameDataColumn="Potential",joinCode="NAME",nameJoinColumn="Nationality",FUN="median")
sternEnvHealth <- country2Region(inFile=fifa,
nameDataColumn="Potential",joinCode="NAME",nameJoinColumn="Nationality",FUN="median")
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapByRegion( fifa, nameDataColumn="Potential", joinCode="Name", nameJoinColumn="Nationality", regionType="Stern", FUN="mean")
library(ggplot2)
library(dplyr)
library(corrplot)
library(scales)   # needed for formatting y-axis labels to non-scientific type
library(radarchart)
library(tidyr)
library(tidyverse)
library(reshape2) # melt
library(ggthemes)
library(rworldmap) # world map
library(modelr)
library(radarchart) #Spider chart
############################################
library(e1071) #Q1.c -  skewness() and kurtosis()
library(grid) # geom_segment
library(ggrepel)# Use ggrepel::geom_label_repel
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapByRegion( fifa, nameDataColumn="Potential", joinCode="Name", nameJoinColumn="Nationality", regionType="Stern", FUN="mean")
fifa_players <- data.frame(read.csv(url("https://raw.githubusercontent.com/DataScienceHU/DataAnalysisR_2021/master/data/fifa_data.csv")))
# Pre-processing:
for (i in c(3,6,7,10:71)) {
fifa_players[,i]<-as.numeric((fifa_players[,i]))
}
fifa<-na.omit(fifa_players)
fifa_players <- fifa
fifa_players_info <- fifa[,c(1:11)] # players general info
fifa_players_attribures <- fifa[,c(1,12:45, 6)] # players different skills. Add overall
fifa_players_positions <- fifa[,c(1,46:72,6,7)] # players ability at different positions . Add overall
fifa_players_indicators <- fifa[,c(1,6,7,10,11)] # players general ability
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapByRegion( fifa, nameDataColumn="Potential", joinCode="Name", nameJoinColumn="Nationality", regionType="Stern", FUN="mean")
View(fifa)
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapByRegion( fifa, nameDataColumn="Potential", joinCode="Name", nameJoinColumn="Nationality", regionType="Stern", FUN="mean")
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapByRegion( fifa, nameDataColumn="Potential", joinCode="Name", nameJoinColumn="Nationality", regionType="Stern", FUN="median")
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapByRegion( fifa, nameDataColumn="Potential", joinCode="Name", nameJoinColumn="Nationality", FUN="median")
